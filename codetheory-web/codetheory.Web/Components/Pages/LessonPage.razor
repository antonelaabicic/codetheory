@page "/lesson/{LessonId:int}"
@inject AuthorizedHttpClient AuthorizedClient
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h1 class="mt-3">@lesson?.Title</h1>

<div class="container text-center text-muted fst-italic my-3" style="max-width: 1000px;">
    @lesson?.Summary
</div>

@if (lesson?.Contents != null)
{
    <div class="container mb-5">
        @{
            int lessonContentCount = 0;
        }

        @foreach (var item in RenderItems)
        {
            if (item is LessonContentDTO content)
            {
                <LessonContentView Content="content" />
                lessonContentCount++;

                if (LessonId == 3 && lessonContentCount == 1)
                {
                    <SortAnimation />
                }
                else if (LessonId == 4 && lessonContentCount == 1)
                {
                    <SearchAnimation />
                }
            }
            else if (item is List<CodeSnippet> snippets && snippets.Any())
            {
                <MudTabs Class="my-4 no-scroll-tabs"
                         Elevation="1"
                         Rounded="true"
                         ScrollButtons="ScrollButtons.None"
                         ShowScrollButtons="false"
                         PanelClass="py-3">
                    @foreach (var snippet in snippets)
                    {
                        <MudTabPanel Text="@snippet.Language">
                            <CodeBlock Code="@snippet.Code"
                                       Language="@GetCodeLanguage(snippet.Language)" />
                            @if (!string.IsNullOrWhiteSpace(snippet.Output))
                            {
                                <div class="mt-3">
                                    <strong class="mb-1">Output:</strong>
                                    <pre class="bg-light p-2 border rounded">@snippet.Output</pre>
                                </div>
                            }
                        </MudTabPanel>
                    }
                </MudTabs>
            }
        }
    </div>

    <div class="d-flex align-items-center my-4">
        @if (LessonId > 1)
        {
            <button class="btn btn-outline-primary" @onclick="GoBack">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8"></path>
                </svg>
            </button>
        }

        <div class="flex-grow-1"></div> 
        @if (LessonId < 5)
        {
            <button class="btn btn-outline-success" @onclick="GoNext">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-arrow-right" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8"></path>
                </svg>
            </button>
        }
    </div>
}

else
{
    <p>Loading lesson...</p>
}

@code {
    [Parameter] public int LessonId { get; set; }
    private LessonDTO? lesson;
    private List<object> RenderItems = new();
    private bool _hasLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasLoaded)
        {
            _hasLoaded = true;

            var client = await AuthorizedClient.GetClientAsync();
            lesson = await client.GetFromJsonAsync<LessonDTO>($"api/Lesson/{LessonId}");

            if (lesson?.Contents != null)
            {
                var ordered = lesson.Contents.OrderBy(c => c.ContentOrder).ToList();
                List<LessonContentDTO> buffer = new();

                foreach (var content in ordered)
                {
                    if (content.ContentTypeId == 4)
                    {
                        buffer.Add(content);
                    }
                    else
                    {
                        if (buffer.Any())
                        {
                            RenderItems.Add(ToCodeSnippets(buffer));
                            buffer.Clear();
                        }

                        RenderItems.Add(content);
                    }
                }

                if (buffer.Any())
                {
                    RenderItems.Add(ToCodeSnippets(buffer));
                }
            }

            StateHasChanged(); 
        }
    }

    private List<CodeSnippet> ToCodeSnippets(List<LessonContentDTO> contents)
    {
        var result = new List<CodeSnippet>();
        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };

        foreach (var content in contents)
        {
            try
            {
                var single = JsonSerializer.Deserialize<CodeSnippet>(content.ContentData, options);
                if (single != null)
                {
                    result.Add(single);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JSON parse error: {ex.Message}");
            }
        }

        return result;
    }

    private CodeLanguage GetCodeLanguage(string language) => language.ToLower() switch
    {
        "c++" => CodeLanguage.Cpp,
        "c#" => CodeLanguage.CSharp,
        "java" => CodeLanguage.Java,
        "python" => CodeLanguage.Python,
        _ => CodeLanguage.Markdown
    };

    private void GoBack()
    {
        Navigation.NavigateTo("/lesson/" + (LessonId - 1) + "/quiz", forceLoad: false);
        Navigation.Refresh();
    }

    private void GoNext()
    {
        Navigation.NavigateTo("/lesson/" + (LessonId) + "/quiz", forceLoad: false);
        Navigation.Refresh();
    }
}
