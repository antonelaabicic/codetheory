@page "/students"
@inject AuthorizedHttpClient AuthorizedClient
@inject JwtService JwtService
@rendermode InteractiveServer

<h2 class="my-4">Students Progress</h2>

@if (students == null)
{
    <p>Loading students...</p>
}
else
{
    <div class="input-group mb-4 w-50">
        <input class="form-control"
               placeholder="Search by name or surname..."
               @bind="searchTerm"
               @bind:event="oninput"
               @onkeydown="HandleEnterKey" />

        <button class="btn ms-3 btn-info" @onclick="ExecuteSearch">Filter</button>
    </div>

    <div class="row g-4">
        @foreach (var s in filteredStudents)
        {
            <div class="col-md-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body text-center">
                        <img src="@s.ImagePath" class="rounded-circle mb-3" width="80" height="80" style="object-fit: cover;" />
                        <h5>@s.FirstName @s.LastName</h5>

                        <ul class="list-group mt-3 text-start">
                            @for (int i = 1; i <= 5; i++)
                            {
                                var lesson = s.Progress.FirstOrDefault(p => p.LessonId == i);
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    Lesson @i
                                    @if (lesson != null)
                                    {
                                        <span class="badge @(lesson.Score >= 50 ? "bg-success" : "bg-danger")">
                                            @lesson.Score%
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No data</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<StudentWithProgressDto>? students;
    private List<StudentWithProgressDto> filteredStudents = new();
    private string? role;
    private string searchTerm = "";
    private bool initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || initialized) return;
        initialized = true;

        role = await JwtService.GetRoleAsync();
        if (role != "teacher")
        {
            StateHasChanged();
            return;
        }

        await LoadStudents();
        StateHasChanged();
    }

    private async Task LoadStudents()
    {
        var client = await AuthorizedClient.GetClientAsync();
        students = await client.GetFromJsonAsync<List<StudentWithProgressDto>>("api/user/students/progress");
        filteredStudents = students?.ToList() ?? new();
    }

    private async Task ExecuteSearch()
    {
        var term = searchTerm.Trim();

        var client = await AuthorizedClient.GetClientAsync();

        if (string.IsNullOrWhiteSpace(term))
        {
            await LoadStudents();
        }
        else
        {
            filteredStudents = await client.GetFromJsonAsync<List<StudentWithProgressDto>>($"api/user/students/progress/search?term={Uri.EscapeDataString(term)}");
        }
    }

    private async Task HandleEnterKey(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ExecuteSearch();
        }
    }
}
