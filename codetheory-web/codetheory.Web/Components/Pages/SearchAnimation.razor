@inject IJSRuntime JS
@rendermode InteractiveServer
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="my-5 border p-4 rounded" style="background-color: #f9f9f9;">
    <h4 class="text-center mb-3">Search Animation</h4>

    <div id="konvaContainer" style="width:950px; height:130px; margin:auto;"></div>

    <MudPaper Class="pa-3 d-flex justify-center gap-3 mt-4">
        <MudSelect T="int" @bind-Value="SelectedAlgorithm" Label="Algorithm">
            <MudSelectItem Value=1>Linear Search</MudSelectItem>
            <MudSelectItem Value=2>Binary Search</MudSelectItem>
        </MudSelect>

        <MudTextField T="int" Label="Target" @bind-Value="Target" />

        <MudButton OnClick="RunAnimation" Color="Color.Primary" Variant="Variant.Outlined">Search</MudButton>
        <MudButton OnClick="Clear" Color="Color.Secondary" Variant="Variant.Outlined">Clear</MudButton>
        <MudButton OnClick="Randomize" Color="Color.Tertiary" Variant="Variant.Outlined">Randomize</MudButton>
    </MudPaper>
</div>

@code {
    private int SelectedAlgorithm = 1;
    private int Target = 205;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initSearchKonva");
        }
    }

    private async Task RunAnimation()
    {
        var algo = SelectedAlgorithm == 1 ? "Linear" : "Binary";
        await JS.InvokeVoidAsync("animateSearch", algo, Target);
    }

    private async Task Clear()
    {
        await JS.InvokeVoidAsync("clearSearchBoard");
    }

    private async Task Randomize()
    {
        await JS.InvokeVoidAsync("randomizeSearchArray");
    }
}
