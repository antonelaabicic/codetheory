@page "/lesson/{LessonId:int}/quiz"
@inject AuthorizedHttpClient AuthorizedClient
@inject NavigationManager Navigation
@inject JwtService JwtService
@rendermode InteractiveServer

<h1 class="mt-3">Quiz @LessonId</h1>

@if (questions == null || answerSelections == null)
{
    <div class="text-muted">Loading quiz...</div>
}
else
{
    <EditForm Model="@answerSelections" OnValidSubmit="SubmitAnswers">
        @foreach (var pair in questions.Zip(answerSelections, (q, a) => new { Question = q, Selection = a }))
        {
            var q = pair.Question;
            var json = JsonDocument.Parse(q.QuestionText);
            var prompt = json.RootElement.GetProperty("prompt").GetString();

            <div class="card mb-4 shadow-sm">
                <div class="card-body">
                    <h5 class="card-title mb-4">@($"{q.QuestionOrder}. {prompt}")</h5>

                    @if (json.RootElement.TryGetProperty("code", out var codeElement))
                    {
                        <CodeBlock Code="@codeElement.GetString()" Language="CodeLanguage.Python" />
                    }

                    @if (json.RootElement.TryGetProperty("image_path", out var imgElement))
                    {
                        <div class="text-center mb-3">
                            <img src="@imgElement.GetString()" class="img-fluid rounded" style="max-height: 400px;" />
                        </div>
                    }

                    @foreach (var a in q.Answers)
                    {
                        <div class="form-check">
                            <input class="form-check-input"
                                   type="radio"
                                   name="question_@q.Id"
                                   value="@a.Id"
                                   checked="@(pair.Selection.SelectedAnswerId == a.Id)"
                                   @onchange="@(() =>
                                   {
                                       pair.Selection.SelectedAnswerId = a.Id;
                                       StateHasChanged();
                                   })" />

                            <label class="form-check-label">@a.AnswerText</label>
                        </div>
                    }
                </div>
            </div>
        }

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-success px-5" disabled="@IsSubmitDisabled">
                Submit Quiz
            </button>
        </div>

        @if (progress != null)
        {
            <div class="mt-4 text-center">
                <div class="alert @(progress.Score >= 50 ? "alert-success" : "alert-danger") d-inline-block text-center" role="alert">
                    Your score: <strong>@progress.Score%</strong>
                </div>
            </div>
        }
    </EditForm>
}

<div class="d-flex align-items-center my-4">
    <button class="btn btn-outline-primary" @onclick="GoBack">
        <i class="bi bi-arrow-left"></i> Back
    </button>

    <div class="flex-grow-1"></div>

    @if (LessonId < 5)
    {
        <button class="btn btn-outline-success" @onclick="GoNext">
            Next <i class="bi bi-arrow-right"></i>
        </button>
    }
</div>

@code {
    [Parameter] public int LessonId { get; set; }

    private List<QuestionDto>? questions;
    private List<AnswerSelection> answerSelections = new();
    private List<UserAnswerDto>? previousAnswers;
    private int userId;
    private bool _initialized = false;

    private UserProgressDto? progress;

    private bool IsSubmitDisabled =>
        answerSelections == null || answerSelections.Any(a => !a.SelectedAnswerId.HasValue);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || _initialized) return;
        _initialized = true;

        try
        {
            var username = await JwtService.GetUsernameAsync();
            var client = await AuthorizedClient.GetClientAsync();

            var user = await client.GetFromJsonAsync<UserDto>($"api/user/by-username/{username}");
            if (user == null)
            {
                Console.WriteLine("User not found.");
                return;
            }

            userId = user.Id;

            questions = await client.GetFromJsonAsync<List<QuestionDto>>($"api/question/{LessonId}/quiz");
            if (questions == null || questions.Count == 0)
            {
                Console.WriteLine("No questions found.");
                return;
            }

            previousAnswers = await client.GetFromJsonAsync<List<UserAnswerDto>>($"api/useranswer/user/{userId}/lesson/{LessonId}");

            answerSelections = questions.Select(q =>
            {
                var selected = previousAnswers?.FirstOrDefault(a => q.Answers.Any(ans => ans.Id == a.AnswerId));
                return new AnswerSelection
                {
                    QuestionId = q.Id,
                    SelectedAnswerId = selected?.AnswerId
                };
            }).ToList();

            var response = await client.GetAsync($"api/useranswer/user/{userId}/lesson/{LessonId}/progress");

            if (response.IsSuccessStatusCode)
            {
                progress = await response.Content.ReadFromJsonAsync<UserProgressDto>();
            }
            else 
            {
                progress = null;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Quiz init failed: {ex.Message}");
        }
    }

    private async Task SubmitAnswers()
    {
        if (questions == null || userId == 0)
        {
            Console.WriteLine("Missing user or questions.");
            return;
        }

        var payload = answerSelections
            .Where(a => a.SelectedAnswerId.HasValue)
            .Select(a =>
            {
                var q = questions.FirstOrDefault(q => q.Id == a.QuestionId);
                var selectedAnswer = q?.Answers.FirstOrDefault(ans => ans.Id == a.SelectedAnswerId);
                if (selectedAnswer == null) return null;

                return new UserAnswerDto
                {
                    UserId = userId,
                    AnswerId = selectedAnswer.Id
                };
            })
            .Where(dto => dto != null)!
            .ToList();

        if (payload.Count == 0)
        {
            Console.WriteLine("No answers to submit.");
            return;
        }

        var client = await AuthorizedClient.GetClientAsync();

        if (previousAnswers != null && previousAnswers.Any())
        {
            await client.PutAsJsonAsync($"api/useranswer/user/{userId}/lesson/{LessonId}", payload);
            progress = await client.GetFromJsonAsync<UserProgressDto>($"api/useranswer/user/{userId}/lesson/{LessonId}/progress");
        }
        else
        {
            await client.PostAsJsonAsync($"api/useranswer/user/{userId}/lesson/{LessonId}", payload);
            progress = await client.GetFromJsonAsync<UserProgressDto>($"api/useranswer/user/{userId}/lesson/{LessonId}/progress");
        }

        Console.WriteLine("Answers submitted.");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/lesson/" + LessonId, forceLoad: false);
        Navigation.Refresh();
    }

    private void GoNext()
    {
        Navigation.NavigateTo("/lesson/" + (LessonId + 1), forceLoad: false);
        Navigation.Refresh();
    }

    private class AnswerSelection
    {
        public int QuestionId { get; set; }
        public int? SelectedAnswerId { get; set; } = null;
    }
}
