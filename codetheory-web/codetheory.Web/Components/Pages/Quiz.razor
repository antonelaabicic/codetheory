@page "/lesson/{LessonId:int}/quiz"
@using codetheory.Web.Models
@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@using MudBlazor
@rendermode InteractiveServer

<h1 class="mt-3">Quiz @LessonId</h1>

<MudPaper Class="pa-3 mx-auto" MaxWidth="800px">
    @if (questions == null)
    {
        <MudProgressCircular Indeterminate />
    }
    else
    {
        <EditForm Model="@userAnswers" OnValidSubmit="SubmitAnswers">
            @foreach (var q in questions.OrderBy(q => q.QuestionOrder))
            {
                var json = JsonDocument.Parse(q.QuestionText);

                <MudCard Class="mb-4 px-4 pt-4 pb-2">
                    <MudText Typo="Typo.h6" Class="mb-2">
                        @($"{q.QuestionOrder}. {json.RootElement.GetProperty("prompt").GetString()}")
                    </MudText>

                    @if (json.RootElement.TryGetProperty("code", out var codeElement))
                    {
                        <CodeBlock Code="@codeElement.GetString()" Language="CodeLanguage.Python" />
                    }

                    @if (json.RootElement.TryGetProperty("image_path", out var imgElement))
                    {
                        <div class="d-flex justify-content-center mb-3">
                            <img src="@imgElement.GetString()" style="max-width: 100%; max-height: 400px;" class="rounded shadow-sm" />
                        </div>
                    }

                    <MudRadioGroup T="int?" @bind-SelectedOption="userAnswers[q.Id]" Class="mt-2">
                        <MudRadio T="int?" Option="null" Style="display: none;" />
                        @foreach (var a in q.Answers)
                        {
                            <MudRadio T="int?" Option="@a.Id" Label="@a.AnswerText" />
                        }
                    </MudRadioGroup>

                </MudCard>
            }

            <MudButton Type="Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mt-4">
                Submit Quiz
            </MudButton>
        </EditForm>
    }
</MudPaper>

@code {
    [Parameter] public int LessonId { get; set; }

    private List<QuestionDto>? questions;
    private Dictionary<int, int?> userAnswers = new();

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("Api");
        questions = await client.GetFromJsonAsync<List<QuestionDto>>($"api/question/{LessonId}/quiz");

        if (questions != null)
        {
            foreach (var question in questions)
            {
                userAnswers[question.Id] = null; 
            }
        }
    }

    private void SubmitAnswers()
    {
        foreach (var entry in userAnswers)
        {
            Console.WriteLine($"Question {entry.Key} → Selected Answer {entry.Value}");
        }

        // TODO: Post userAnswers to API if needed
    }
}
