@inject AuthorizedHttpClient AuthorizedClient
@inject AuthStateService AuthService
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">CodeTheory</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
                    <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5z"></path>
                </svg> Home
            </NavLink>
        </div>

        @if (AuthService.IsLoggedIn && AuthService.Role == "admin")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/users">Users</NavLink>
            </div>
        }

        @if (AuthService.IsLoggedIn && AuthService.Role == "student")
        {
            @if (lessons == null)
            {
                <div class="px-3 text-muted">Loading lessons...</div>
            }
            else
            {
                @foreach (var lesson in lessons.OrderBy(l => l.LessonOrder))
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@($"/lesson/{lesson.Id}")">@lesson.Title</NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@($"/lesson/{lesson.Id}/quiz")">Quiz @lesson.LessonOrder</NavLink>
                    </div>
                }
            }
        }

        @if (AuthService.IsLoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/logout">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-box-arrow-in-left" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 1 1 0v2A1.5 1.5 0 0 1 9.5 14h-8A1.5 1.5 0 0 1 0 12.5v-9A1.5 1.5 0 0 1 1.5 2h8A1.5 1.5 0 0 1 11 3.5v2a.5.5 0 0 1-1 0z"></path>
                        <path fill-rule="evenodd" d="M4.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H14.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708z"></path>
                    </svg> Logout
                </NavLink>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/login">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-box-arrow-in-right" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0z"></path>
                        <path fill-rule="evenodd" d="M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708z"></path>
                    </svg> Login
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private List<LessonNavbarDto>? lessons;
    private bool _hasLoadedLessons;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthService.OnChange += HandleAuthChanged;

            if (AuthService.IsLoggedIn && AuthService.Role == "student")
            {
                await LoadLessonsAsync();
                StateHasChanged();
            }
        }
    }

    private async void HandleAuthChanged()
    {
        if (AuthService.IsLoggedIn && AuthService.Role == "student")
        {
            await LoadLessonsAsync();
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            lessons = null;
        }
    }

    private async Task LoadLessonsAsync()
    {
        if (_hasLoadedLessons) return;

        try
        {
            var client = await AuthorizedClient.GetClientAsync();
            lessons = await client.GetFromJsonAsync<List<LessonNavbarDto>>("api/Lesson");
            _hasLoadedLessons = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lesson fetch failed: {ex.Message}");
            lessons = new();
        }
    }

    public void Dispose()
    {
        AuthService.OnChange -= HandleAuthChanged;
    }
}

